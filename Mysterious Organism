// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ["A", "T", "C", "G"];
  return dnaBases[Math.floor(Math.random() * 4)];
};

// Returns a random single strand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = [];
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase());
  }
  return newStrand;
};

const pAequorFactory = (specimenNum, dna) => {
  return {
    specimenNum,
    dna,
    mutate() {
      const firstBase = this.dna[0];
      do {
        this.dna = mockUpStrand();
      } while (this.dna[0] === firstBase);
    },
    compareDNA(pAequor) {
      let counter = 0;
      for (let i = 0; i < 15; i++) {
        this.dna[i] === pAequor.dna[i] ? counter++ : false;
      }
      return console.log(
        `specimen ${this.specimenNum} and specimen  ${
          pAequor.specimenNum
        } have ${((counter * 100) / 15).toFixed(1)}% DNA in common`
      );
    },
    willLikelySurvive() {
      let counter = 0;
      this.dna.forEach((base) =>
        base === "C" || base === "G" ? counter++ : false
      );
      return (counter * 100) / 20 >= 12 ? true : false;
    },
    complementStrand(){
      let complementDna= [];
      this.dna.forEach(base =>{
        base === 'A' ? complementDna.push('T') : false;
        base === 'T' ? complementDna.push('A') : false;
        base === 'C' ? complementDna.push('G') : false;
        base === 'G' ? complementDna.push('C') : false;
      });
      return complementDna;
    }
  };
};

let pAequor = [];
let j = 0;
do {
  const pAequorToTest = pAequorFactory(j, mockUpStrand());
  if (pAequorToTest.willLikelySurvive()) {
    pAequor.push(pAequorToTest);
    j++;
  }
} while (pAequor.length < 30);

console.log(pAequor[0].dna)
console.log(pAequor[0].complementStrand())
